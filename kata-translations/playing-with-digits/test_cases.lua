local solution = require 'solution'
local s = function(n,pow)
  -- Make it green, then make it clean :)
  local answer = 0
  for digit in string.gmatch(tostring(n), '(%d)') do
    digit = tonumber(digit)
    answer = answer + math.pow(digit,pow)
    pow = pow + 1
  end
  if 0 == answer%n then return answer/n
  else return -1 end
end
describe("Playing with Digits sample test cases", function()
  it("Static tests", function()
    assert.are.same(1, solution.dig_pow(89, 1))
    assert.are.same(-1, solution.dig_pow(92, 1))
    assert.are.same(51, solution.dig_pow(46288, 3))
  end)
end)
describe("Playing with Digits hidden test cases", function()
  it("Static tests", function()
    assert.are.same(1, solution.dig_pow(89, 1))
    assert.are.same(-1, solution.dig_pow(92, 1))
    assert.are.same(51, solution.dig_pow(46288, 3))
  end)
  it("Static full set of tests", function()
    assert.are.same(1, solution.dig_pow(89, 1))
    assert.are.same(-1, solution.dig_pow(92, 1))
    assert.are.same(51, solution.dig_pow(46288, 3))
    assert.are.same(9, solution.dig_pow(114, 3))
    assert.are.same(-1, solution.dig_pow(46288, 5))
    assert.are.same(1, solution.dig_pow(135, 1))
    assert.are.same(1, solution.dig_pow(175, 1))
    assert.are.same(1, solution.dig_pow(518, 1))
    assert.are.same(1, solution.dig_pow(598, 1))
    assert.are.same(1, solution.dig_pow(1306, 1))
    assert.are.same(1, solution.dig_pow(2427, 1))
    assert.are.same(1, solution.dig_pow(2646798, 1))
    assert.are.same(-1, solution.dig_pow(3456789, 1))
    assert.are.same(-1, solution.dig_pow(3456789, 5))
    assert.are.same(3, solution.dig_pow(198, 1))
    assert.are.same(3, solution.dig_pow(249, 1))
    assert.are.same(2, solution.dig_pow(1377, 1))
    assert.are.same(1, solution.dig_pow(1676, 1))
    assert.are.same(2, solution.dig_pow(695, 2))
    assert.are.same(19, solution.dig_pow(1878, 2))
    assert.are.same(5, solution.dig_pow(7388, 2))
    assert.are.same(1, solution.dig_pow(47016, 2))
    assert.are.same(1, solution.dig_pow(542186, 2))
    assert.are.same(5, solution.dig_pow(261, 3))
    assert.are.same(35, solution.dig_pow(1385, 3))
    assert.are.same(66, solution.dig_pow(2697, 3))
    assert.are.same(10, solution.dig_pow(6376, 3))
    assert.are.same(1, solution.dig_pow(6714, 3))
    assert.are.same(1, solution.dig_pow(63760, 3))
    assert.are.same(1, solution.dig_pow(63761, 3))
    assert.are.same(4, solution.dig_pow(132921, 3))
    assert.are.same(12933, solution.dig_pow(10383, 6))
  end)
  it("Static tests full set of test #2", function()
    assert.are.same(s(89, 1), solution.dig_pow(89, 1))
    assert.are.same(s(92, 1), solution.dig_pow(92, 1))
    assert.are.same(s(46288, 3), solution.dig_pow(46288, 3))
    assert.are.same(s(114, 3), solution.dig_pow(114, 3))
    assert.are.same(s(46288, 5), solution.dig_pow(46288, 5))
    assert.are.same(s(135, 1), solution.dig_pow(135, 1))
    assert.are.same(s(175, 1), solution.dig_pow(175, 1))
    assert.are.same(s(518, 1), solution.dig_pow(518, 1))
    assert.are.same(s(598, 1), solution.dig_pow(598, 1))
    assert.are.same(s(1306, 1), solution.dig_pow(1306, 1))
    assert.are.same(s(2427, 1), solution.dig_pow(2427, 1))
    assert.are.same(s(2646798, 1), solution.dig_pow(2646798, 1))
    assert.are.same(s(3456789, 1), solution.dig_pow(3456789, 1))
    assert.are.same(s(3456789, 5), solution.dig_pow(3456789, 5))
    assert.are.same(s(198, 1), solution.dig_pow(198, 1))
    assert.are.same(s(249, 1), solution.dig_pow(249, 1))
    assert.are.same(s(1377, 1), solution.dig_pow(1377, 1))
    assert.are.same(s(1676, 1), solution.dig_pow(1676, 1))
    assert.are.same(s(695, 2), solution.dig_pow(695, 2))
    assert.are.same(s(1878, 2), solution.dig_pow(1878, 2))
    assert.are.same(s(7388, 2), solution.dig_pow(7388, 2))
    assert.are.same(s(47016, 2), solution.dig_pow(47016, 2))
    assert.are.same(s(542186, 2), solution.dig_pow(542186, 2))
    assert.are.same(s(261, 3), solution.dig_pow(261, 3))
    assert.are.same(s(1385, 3), solution.dig_pow(1385, 3))
    assert.are.same(s(2697, 3), solution.dig_pow(2697, 3))
    assert.are.same(s(6376, 3), solution.dig_pow(6376, 3))
    assert.are.same(s(6714, 3), solution.dig_pow(6714, 3))
    assert.are.same(s(63760, 3), solution.dig_pow(63760, 3))
    assert.are.same(s(63761, 3), solution.dig_pow(63761, 3))
    assert.are.same(s(132921, 3), solution.dig_pow(132921, 3))
    assert.are.same(s(10383, 6), solution.dig_pow(10383, 6))
  end)
  it("Auto tests", function()
    for power=1,6,1 do
      for number=80,1900,1 do
        assert.are.same(s(number, power), solution.dig_pow(number, power))
      end
    end
  end)
end)
